{"version":3,"sources":["es5-sham.js"],"names":["root","factory","define","amd","exports","module","returnExports","this","defineGetter","defineSetter","lookupGetter","lookupSetter","call","Function","prototypeOfObject","Object","prototype","owns","bind","hasOwnProperty","isEnumerable","propertyIsEnumerable","toStr","toString","supportsAccessors","__defineGetter__","__defineSetter__","__lookupGetter__","__lookupSetter__","isPrimitive","o","getPrototypeOf","object","proto","__proto__","constructor","defineProperty","doesGetOwnPropertyDescriptorWork","sentinel","getOwnPropertyDescriptor","value","exception","getOwnPropertyDescriptorWorksOnObject","document","createElement","getOwnPropertyDescriptorFallback","property","TypeError","descriptor","enumerable","configurable","notPrototypeOfObject","getter","setter","get","set","writable","getOwnPropertyNames","keys","create","createEmpty","empty","domain","ActiveXObject","shouldUseActiveX","xDoc","write","close","parentWindow","getEmptyViaActiveX","iframe","parent","body","documentElement","style","display","appendChild","src","contentWindow","removeChild","getEmptyViaIFrame","isPrototypeOf","toLocaleString","valueOf","Empty","properties","Type","defineProperties","freezeObject","doesDefinePropertyWork","definePropertyWorksOnObject","definePropertyWorksOnDom","definePropertyFallback","definePropertiesFallback","hasGetter","hasSetter","forEach","seal","freeze","preventExtensions","isSealed","isFrozen","isExtensible","name","returnValue"],"mappings":"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","file":"es5-sham.js","sourcesContent":["/*!\n * https://github.com/es-shims/es5-shim\n * @license es5-shim Copyright 2009-2020 by contributors, MIT License\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE\n */\n\n// vim: ts=4 sts=4 sw=4 expandtab\n\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.\n;\n\n// UMD (Universal Module Definition)\n// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n(function (root, factory) {\n    'use strict';\n\n    /* global define */\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(); // eslint-disable-line no-param-reassign\n    }\n}(this, function () {\n\n    var call = Function.call;\n    var prototypeOfObject = Object.prototype;\n    var owns = call.bind(prototypeOfObject.hasOwnProperty);\n    var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);\n    var toStr = call.bind(prototypeOfObject.toString);\n\n    // If JS engine supports accessors creating shortcuts.\n    var defineGetter;\n    var defineSetter;\n    var lookupGetter;\n    var lookupSetter;\n    var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');\n    if (supportsAccessors) {\n        /* eslint-disable no-underscore-dangle, no-restricted-properties */\n        defineGetter = call.bind(prototypeOfObject.__defineGetter__);\n        defineSetter = call.bind(prototypeOfObject.__defineSetter__);\n        lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);\n        lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);\n        /* eslint-enable no-underscore-dangle, no-restricted-properties */\n    }\n\n    var isPrimitive = function isPrimitive(o) {\n        return o == null || (typeof o !== 'object' && typeof o !== 'function');\n    };\n\n    // ES5 15.2.3.2\n    // http://es5.github.com/#x15.2.3.2\n    if (!Object.getPrototypeOf) {\n        // https://github.com/es-shims/es5-shim/issues#issue/2\n        // http://ejohn.org/blog/objectgetprototypeof/\n        // recommended by fschaefer on github\n        //\n        // sure, and webreflection says ^_^\n        // ... this will nerever possibly return null\n        // ... Opera Mini breaks here with infinite loops\n        Object.getPrototypeOf = function getPrototypeOf(object) {\n            // eslint-disable-next-line no-proto\n            var proto = object.__proto__;\n            if (proto || proto === null) {\n                return proto;\n            } else if (toStr(object.constructor) === '[object Function]') {\n                return object.constructor.prototype;\n            } else if (object instanceof Object) {\n                return prototypeOfObject;\n            } else {\n                // Correctly return null for Objects created with `Object.create(null)`\n                // (shammed or native) or `{ __proto__: null}`.  Also returns null for\n                // cross-realm objects on browsers that lack `__proto__` support (like\n                // IE <11), but that's the best we can do.\n                return null;\n            }\n        };\n    }\n\n    // ES5 15.2.3.3\n    // http://es5.github.com/#x15.2.3.3\n\n    // check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.\n    if (Object.defineProperty) {\n        var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {\n            try {\n                object.sentinel = 0; // eslint-disable-line no-param-reassign\n                return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;\n            } catch (exception) {\n                return false;\n            }\n        };\n        var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});\n        var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined'\n            || doesGetOwnPropertyDescriptorWork(document.createElement('div'));\n        if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {\n            var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;\n        }\n    }\n\n    if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {\n        var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';\n\n        /* eslint-disable no-proto */\n        Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {\n            if (isPrimitive(object)) {\n                throw new TypeError(ERR_NON_OBJECT + object);\n            }\n\n            // make a valiant attempt to use the real getOwnPropertyDescriptor\n            // for I8's DOM elements.\n            if (getOwnPropertyDescriptorFallback) {\n                try {\n                    return getOwnPropertyDescriptorFallback.call(Object, object, property);\n                } catch (exception) {\n                    // try the shim if the real one doesn't work\n                }\n            }\n\n            var descriptor;\n\n            // If object does not owns property return undefined immediately.\n            if (!owns(object, property)) {\n                return descriptor;\n            }\n\n            // If object has a property then it's for sure `configurable`, and\n            // probably `enumerable`. Detect enumerability though.\n            descriptor = {\n                enumerable: isEnumerable(object, property),\n                configurable: true\n            };\n\n            // If JS engine supports accessor properties then property may be a\n            // getter or setter.\n            if (supportsAccessors) {\n                // Unfortunately `__lookupGetter__` will return a getter even\n                // if object has own non getter property along with a same named\n                // inherited getter. To avoid misbehavior we temporary remove\n                // `__proto__` so that `__lookupGetter__` will return getter only\n                // if it's owned by an object.\n                var prototype = object.__proto__;\n                var notPrototypeOfObject = object !== prototypeOfObject;\n                // avoid recursion problem, breaking in Opera Mini when\n                // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')\n                // or any other Object.prototype accessor\n                if (notPrototypeOfObject) {\n                    object.__proto__ = prototypeOfObject; // eslint-disable-line no-param-reassign\n                }\n\n                var getter = lookupGetter(object, property);\n                var setter = lookupSetter(object, property);\n\n                if (notPrototypeOfObject) {\n                    // Once we have getter and setter we can put values back.\n                    object.__proto__ = prototype; // eslint-disable-line no-param-reassign\n                }\n\n                if (getter || setter) {\n                    if (getter) {\n                        descriptor.get = getter;\n                    }\n                    if (setter) {\n                        descriptor.set = setter;\n                    }\n                    // If it was accessor property we're done and return here\n                    // in order to avoid adding `value` to the descriptor.\n                    return descriptor;\n                }\n            }\n\n            // If we got this far we know that object has an own property that is\n            // not an accessor so we set it as a value and return descriptor.\n            descriptor.value = object[property];\n            descriptor.writable = true;\n            return descriptor;\n        };\n        /* eslint-enable no-proto */\n    }\n\n    // ES5 15.2.3.4\n    // http://es5.github.com/#x15.2.3.4\n    if (!Object.getOwnPropertyNames) {\n        Object.getOwnPropertyNames = function getOwnPropertyNames(object) {\n            return Object.keys(object);\n        };\n    }\n\n    // ES5 15.2.3.5\n    // http://es5.github.com/#x15.2.3.5\n    if (!Object.create) {\n\n        // Contributed by Brandon Benvie, October, 2012\n        var createEmpty;\n        var supportsProto = !({ __proto__: null } instanceof Object);\n        // the following produces false positives\n        // in Opera Mini => not a reliable check\n        // Object.prototype.__proto__ === null\n\n        // Check for document.domain and active x support\n        // No need to use active x approach when document.domain is not set\n        // see https://github.com/es-shims/es5-shim/issues/150\n        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n        /* global ActiveXObject */\n        var shouldUseActiveX = function shouldUseActiveX() {\n            // return early if document.domain not set\n            if (!document.domain) {\n                return false;\n            }\n\n            try {\n                return !!new ActiveXObject('htmlfile');\n            } catch (exception) {\n                return false;\n            }\n        };\n\n        // This supports IE8 when document.domain is used\n        // see https://github.com/es-shims/es5-shim/issues/150\n        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n        var getEmptyViaActiveX = function getEmptyViaActiveX() {\n            var empty;\n            var xDoc;\n\n            xDoc = new ActiveXObject('htmlfile');\n\n            var script = 'script';\n            xDoc.write('<' + script + '></' + script + '>');\n            xDoc.close();\n\n            empty = xDoc.parentWindow.Object.prototype;\n            xDoc = null;\n\n            return empty;\n        };\n\n        // The original implementation using an iframe\n        // before the activex approach was added\n        // see https://github.com/es-shims/es5-shim/issues/150\n        var getEmptyViaIFrame = function getEmptyViaIFrame() {\n            var iframe = document.createElement('iframe');\n            var parent = document.body || document.documentElement;\n            var empty;\n\n            iframe.style.display = 'none';\n            parent.appendChild(iframe);\n            // eslint-disable-next-line no-script-url\n            iframe.src = 'javascript:';\n\n            empty = iframe.contentWindow.Object.prototype;\n            parent.removeChild(iframe);\n            iframe = null;\n\n            return empty;\n        };\n\n        /* global document */\n        if (supportsProto || typeof document === 'undefined') {\n            createEmpty = function () {\n                return { __proto__: null };\n            };\n        } else {\n            // In old IE __proto__ can't be used to manually set `null`, nor does\n            // any other method exist to make an object that inherits from nothing,\n            // aside from Object.prototype itself. Instead, create a new global\n            // object and *steal* its Object.prototype and strip it bare. This is\n            // used as the prototype to create nullary objects.\n            createEmpty = function () {\n                // Determine which approach to use\n                // see https://github.com/es-shims/es5-shim/issues/150\n                var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();\n\n                delete empty.constructor;\n                delete empty.hasOwnProperty;\n                delete empty.propertyIsEnumerable;\n                delete empty.isPrototypeOf;\n                delete empty.toLocaleString;\n                delete empty.toString;\n                delete empty.valueOf;\n\n                var Empty = function Empty() {};\n                Empty.prototype = empty;\n                // short-circuit future calls\n                createEmpty = function () {\n                    return new Empty();\n                };\n                return new Empty();\n            };\n        }\n\n        Object.create = function create(prototype, properties) {\n\n            var object;\n            var Type = function Type() {}; // An empty constructor.\n\n            if (prototype === null) {\n                object = createEmpty();\n            } else if (isPrimitive(prototype)) {\n                // In the native implementation `parent` can be `null`\n                // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)\n                // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`\n                // like they are in modern browsers. Using `Object.create` on DOM elements\n                // is...err...probably inappropriate, but the native version allows for it.\n                throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome\n            } else {\n                Type.prototype = prototype;\n                object = new Type();\n                // IE has no built-in implementation of `Object.getPrototypeOf`\n                // neither `__proto__`, but this manually setting `__proto__` will\n                // guarantee that `Object.getPrototypeOf` will work as expected with\n                // objects created using `Object.create`\n                // eslint-disable-next-line no-proto\n                object.__proto__ = prototype;\n            }\n\n            if (properties !== void 0) {\n                Object.defineProperties(object, properties);\n            }\n\n            return object;\n        };\n    }\n\n    // ES5 15.2.3.6\n    // http://es5.github.com/#x15.2.3.6\n\n    // Patch for WebKit and IE8 standard mode\n    // Designed by hax <hax.github.com>\n    // related issue: https://github.com/es-shims/es5-shim/issues#issue/5\n    // IE8 Reference:\n    //     http://msdn.microsoft.com/en-us/library/dd282900.aspx\n    //     http://msdn.microsoft.com/en-us/library/dd229916.aspx\n    // WebKit Bugs:\n    //     https://bugs.webkit.org/show_bug.cgi?id=36423\n\n    var doesDefinePropertyWork = function doesDefinePropertyWork(object) {\n        try {\n            Object.defineProperty(object, 'sentinel', {});\n            return 'sentinel' in object;\n        } catch (exception) {\n            return false;\n        }\n    };\n\n    // check whether defineProperty works if it's given. Otherwise,\n    // shim partially.\n    if (Object.defineProperty) {\n        var definePropertyWorksOnObject = doesDefinePropertyWork({});\n        var definePropertyWorksOnDom = typeof document === 'undefined'\n            || doesDefinePropertyWork(document.createElement('div'));\n        if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {\n            var definePropertyFallback = Object.defineProperty,\n                definePropertiesFallback = Object.defineProperties;\n        }\n    }\n\n    if (!Object.defineProperty || definePropertyFallback) {\n        var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';\n        var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';\n        var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';\n\n        Object.defineProperty = function defineProperty(object, property, descriptor) {\n            if (isPrimitive(object)) {\n                throw new TypeError(ERR_NON_OBJECT_TARGET + object);\n            }\n            if (isPrimitive(descriptor)) {\n                throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);\n            }\n            // make a valiant attempt to use the real defineProperty\n            // for I8's DOM elements.\n            if (definePropertyFallback) {\n                try {\n                    return definePropertyFallback.call(Object, object, property, descriptor);\n                } catch (exception) {\n                    // try the shim if the real one doesn't work\n                }\n            }\n\n            // If it's a data property.\n            if ('value' in descriptor) {\n                // fail silently if 'writable', 'enumerable', or 'configurable'\n                // are requested but not supported\n                /*\n                // alternate approach:\n                if ( // can't implement these features; allow false but not true\n                    ('writable' in descriptor && !descriptor.writable) ||\n                    ('enumerable' in descriptor && !descriptor.enumerable) ||\n                    ('configurable' in descriptor && !descriptor.configurable)\n                ))\n                    throw new RangeError(\n                        'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'\n                    );\n                */\n\n                if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {\n                    // As accessors are supported only on engines implementing\n                    // `__proto__` we can safely override `__proto__` while defining\n                    // a property to make sure that we don't hit an inherited\n                    // accessor.\n                    /* eslint-disable no-proto, no-param-reassign */\n                    var prototype = object.__proto__;\n                    object.__proto__ = prototypeOfObject;\n                    // Deleting a property anyway since getter / setter may be\n                    // defined on object itself.\n                    delete object[property];\n                    object[property] = descriptor.value;\n                    // Setting original `__proto__` back now.\n                    object.__proto__ = prototype;\n                    /* eslint-enable no-proto, no-param-reassign */\n                } else {\n                    object[property] = descriptor.value; // eslint-disable-line no-param-reassign\n                }\n            } else {\n                var hasGetter = 'get' in descriptor;\n                var hasSetter = 'set' in descriptor;\n                if (!supportsAccessors && (hasGetter || hasSetter)) {\n                    throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n                }\n                // If we got that far then getters and setters can be defined !!\n                if (hasGetter) {\n                    defineGetter(object, property, descriptor.get);\n                }\n                if (hasSetter) {\n                    defineSetter(object, property, descriptor.set);\n                }\n            }\n            return object;\n        };\n    }\n\n    // ES5 15.2.3.7\n    // http://es5.github.com/#x15.2.3.7\n    if (!Object.defineProperties || definePropertiesFallback) {\n        Object.defineProperties = function defineProperties(object, properties) {\n            // make a valiant attempt to use the real defineProperties\n            if (definePropertiesFallback) {\n                try {\n                    return definePropertiesFallback.call(Object, object, properties);\n                } catch (exception) {\n                    // try the shim if the real one doesn't work\n                }\n            }\n\n            Object.keys(properties).forEach(function (property) {\n                if (property !== '__proto__') {\n                    Object.defineProperty(object, property, properties[property]);\n                }\n            });\n            return object;\n        };\n    }\n\n    // ES5 15.2.3.8\n    // http://es5.github.com/#x15.2.3.8\n    if (!Object.seal) {\n        Object.seal = function seal(object) {\n            if (Object(object) !== object) {\n                throw new TypeError('Object.seal can only be called on Objects.');\n            }\n            // this is misleading and breaks feature-detection, but\n            // allows \"securable\" code to \"gracefully\" degrade to working\n            // but insecure code.\n            return object;\n        };\n    }\n\n    // ES5 15.2.3.9\n    // http://es5.github.com/#x15.2.3.9\n    if (!Object.freeze) {\n        Object.freeze = function freeze(object) {\n            if (Object(object) !== object) {\n                throw new TypeError('Object.freeze can only be called on Objects.');\n            }\n            // this is misleading and breaks feature-detection, but\n            // allows \"securable\" code to \"gracefully\" degrade to working\n            // but insecure code.\n            return object;\n        };\n    }\n\n    // detect a Rhino bug and patch it\n    try {\n        Object.freeze(function () {});\n    } catch (exception) {\n        Object.freeze = (function (freezeObject) {\n            return function freeze(object) {\n                if (typeof object === 'function') {\n                    return object;\n                } else {\n                    return freezeObject(object);\n                }\n            };\n        }(Object.freeze));\n    }\n\n    // ES5 15.2.3.10\n    // http://es5.github.com/#x15.2.3.10\n    if (!Object.preventExtensions) {\n        Object.preventExtensions = function preventExtensions(object) {\n            if (Object(object) !== object) {\n                throw new TypeError('Object.preventExtensions can only be called on Objects.');\n            }\n            // this is misleading and breaks feature-detection, but\n            // allows \"securable\" code to \"gracefully\" degrade to working\n            // but insecure code.\n            return object;\n        };\n    }\n\n    // ES5 15.2.3.11\n    // http://es5.github.com/#x15.2.3.11\n    if (!Object.isSealed) {\n        Object.isSealed = function isSealed(object) {\n            if (Object(object) !== object) {\n                throw new TypeError('Object.isSealed can only be called on Objects.');\n            }\n            return false;\n        };\n    }\n\n    // ES5 15.2.3.12\n    // http://es5.github.com/#x15.2.3.12\n    if (!Object.isFrozen) {\n        Object.isFrozen = function isFrozen(object) {\n            if (Object(object) !== object) {\n                throw new TypeError('Object.isFrozen can only be called on Objects.');\n            }\n            return false;\n        };\n    }\n\n    // ES5 15.2.3.13\n    // http://es5.github.com/#x15.2.3.13\n    if (!Object.isExtensible) {\n        Object.isExtensible = function isExtensible(object) {\n            // 1. If Type(O) is not Object throw a TypeError exception.\n            if (Object(object) !== object) {\n                throw new TypeError('Object.isExtensible can only be called on Objects.');\n            }\n            // 2. Return the Boolean value of the [[Extensible]] internal property of O.\n            var name = '';\n            while (owns(object, name)) {\n                name += '?';\n            }\n            object[name] = true; // eslint-disable-line no-param-reassign\n            var returnValue = owns(object, name);\n            delete object[name]; // eslint-disable-line no-param-reassign\n            return returnValue;\n        };\n    }\n\n}));\n"]}